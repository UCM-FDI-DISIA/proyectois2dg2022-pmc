package logic;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONObject;

<<<<<<< HEAD
<<<<<<< HEAD
public class Team implements Reportable, Comparable<Team> {
	private static Map<String, Team> relations = new HashMap<>();
=======
public class Team implements Reportable, Comparable<Team>, Rival {
	private static Map<Player, Team> relations = new HashMap<>();
>>>>>>> InterfazDani
	private String name;
	private int score;
	private List<Player> players;
	public static final String TYPE = "Team";
=======
import control.Controller;

public class Team implements Reportable {
	private Color color;
=======
public class Team implements Reportable, Comparable<Team> {
	private static Map<Player, Team> relations = new HashMap<>();
>>>>>>> master
	private String name;
	private int score;
	private List<Player> players;
>>>>>>> jUnits
	
	public Team(String name, List<Player> list_players) {
		this.name = name;
		this.score = 0;
		this.players = list_players;
<<<<<<< HEAD
		for (Player p : this.players)
			relations.put(p.getName(), this);
=======
<<<<<<< HEAD
=======
		for (Player p : this.players)
			relations.put(p, this);
>>>>>>> jUnits
	}
	
	@Override
	public int compareTo(Team o) {
		return -(this.score - o.score);		// lleva el menos delante para denotar que es el >
<<<<<<< HEAD
=======
>>>>>>> master
>>>>>>> jUnits
	}
	
	public void update() {
		this.score = 0;
		for (Player p : players)
			this.score += p.getScore();
	}
	
	public static Team getTeam(Player p) {
<<<<<<< HEAD
		return relations.get(p.getName());
=======
		return relations.get(p);
>>>>>>> jUnits
	}
	
	public int getScore() {
		return this.score;
	}
	
	@Override
	public String toString() {
<<<<<<< HEAD
		return this.getName();
=======
		return this.name;
	}

	
	//lo cree para los test, si no lo necesitamos lo borramos y ya
	public int getScore() {
		return score;
>>>>>>> jUnits
	}

	@Override
	public JSONObject report() {
		JSONObject teamJSONObject = new JSONObject();
		teamJSONObject.put("name", this.name);
		JSONArray playersJSONObject = new JSONArray();
		for (Player p : this.players)
			playersJSONObject.put(p.report());
		teamJSONObject.put("players", playersJSONObject);
		return teamJSONObject;
	}
	
<<<<<<< HEAD
	public String getName() {
		return this.name; 
	}

	@Override
	public String getType() {
		return TYPE;
=======
	public static void main(String[] args) {
		Player p1 = new Player(Color.YELLOW, "Chacon Chacon");
		Player p2 = new Player(Color.YELLOW, "Leonardo Macias Pasteles");
		List<Player> l = new ArrayList<Player>();
		l.add(p1); l.add(p2);
		Team equipo1 = new Team("Basados", Color.YELLOW, l);
		
		System.out.print(equipo1.report());
>>>>>>> jUnits
	}

}
